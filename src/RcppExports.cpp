// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// belplauHFast
NumericMatrix belplauHFast(NumericVector MACC, const arma::sp_mat& W2, NumericMatrix h, bool display_progress);
RcppExport SEXP _dst_belplauHFast(SEXP MACCSEXP, SEXP W2SEXP, SEXP hSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type MACC(MACCSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type h(hSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(belplauHFast(MACC, W2, h, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// closure
LogicalMatrix closure(IntegerMatrix ttx, bool computeJoin, bool display_progress);
RcppExport SEXP _dst_closure(SEXP ttxSEXP, SEXP computeJoinSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type ttx(ttxSEXP);
    Rcpp::traits::input_parameter< bool >::type computeJoin(computeJoinSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(closure(ttx, computeJoin, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// closureSparse
arma::sp_mat closureSparse(arma::sp_mat ttx, bool computeJoin, bool display_progress);
RcppExport SEXP _dst_closureSparse(SEXP ttxSEXP, SEXP computeJoinSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type ttx(ttxSEXP);
    Rcpp::traits::input_parameter< bool >::type computeJoin(computeJoinSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(closureSparse(ttx, computeJoin, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// commSparse
NumericVector commSparse(arma::sp_mat x, arma::sp_mat x_c, double a, bool display_progress);
RcppExport SEXP _dst_commSparse(SEXP xSEXP, SEXP x_cSEXP, SEXP aSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type x_c(x_cSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(commSparse(x, x_c, a, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// iotaSparse
arma::sp_mat iotaSparse(arma::sp_mat tt, bool display_progress);
RcppExport SEXP _dst_iotaSparse(SEXP ttSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(iotaSparse(tt, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// superBcaFast
Rcpp::List superBcaFast(const arma::mat& x_input, const arma::vec& y, double a, int y0, bool flip, std::string tree_type, bool dsa);
RcppExport SEXP _dst_superBcaFast(SEXP x_inputSEXP, SEXP ySEXP, SEXP aSEXP, SEXP y0SEXP, SEXP flipSEXP, SEXP tree_typeSEXP, SEXP dsaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x_input(x_inputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< bool >::type flip(flipSEXP);
    Rcpp::traits::input_parameter< std::string >::type tree_type(tree_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type dsa(dsaSEXP);
    rcpp_result_gen = Rcpp::wrap(superBcaFast(x_input, y, a, y0, flip, tree_type, dsa));
    return rcpp_result_gen;
END_RCPP
}
// superBcaFastBelplauSingleton
Rcpp::List superBcaFastBelplauSingleton(const arma::mat& x_input, const arma::vec& y, double a, int y0, bool flip, std::string tree_type, bool dsa);
RcppExport SEXP _dst_superBcaFastBelplauSingleton(SEXP x_inputSEXP, SEXP ySEXP, SEXP aSEXP, SEXP y0SEXP, SEXP flipSEXP, SEXP tree_typeSEXP, SEXP dsaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x_input(x_inputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< bool >::type flip(flipSEXP);
    Rcpp::traits::input_parameter< std::string >::type tree_type(tree_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type dsa(dsaSEXP);
    rcpp_result_gen = Rcpp::wrap(superBcaFastBelplauSingleton(x_input, y, a, y0, flip, tree_type, dsa));
    return rcpp_result_gen;
END_RCPP
}
// buildTreeFast
SEXP buildTreeFast(const arma::sp_mat& tt, const Rcpp::NumericVector& q, bool display_progress, Rcpp::Nullable<Rcpp::IntegerVector> indices);
RcppExport SEXP _dst_buildTreeFast(SEXP ttSEXP, SEXP qSEXP, SEXP display_progressSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(buildTreeFast(tt, q, display_progress, indices));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeFast
SEXP updateTreeFast(SEXP tree_ptr, LogicalVector xx_vec, LogicalVector s_vec);
RcppExport SEXP _dst_updateTreeFast(SEXP tree_ptrSEXP, SEXP xx_vecSEXP, SEXP s_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type tree_ptr(tree_ptrSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type xx_vec(xx_vecSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type s_vec(s_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeFast(tree_ptr, xx_vec, s_vec));
    return rcpp_result_gen;
END_RCPP
}
// supersetFast
SEXP supersetFast(SEXP node_ptr, LogicalVector z_vec);
RcppExport SEXP _dst_supersetFast(SEXP node_ptrSEXP, SEXP z_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type node_ptr(node_ptrSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z_vec(z_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(supersetFast(node_ptr, z_vec));
    return rcpp_result_gen;
END_RCPP
}
// unravelTreeFast
NumericVector unravelTreeFast(SEXP tree_ptr);
RcppExport SEXP _dst_unravelTreeFast(SEXP tree_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type tree_ptr(tree_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(unravelTreeFast(tree_ptr));
    return rcpp_result_gen;
END_RCPP
}
// inspectNode
List inspectNode(SEXP tree_ptr);
RcppExport SEXP _dst_inspectNode(SEXP tree_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type tree_ptr(tree_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(inspectNode(tree_ptr));
    return rcpp_result_gen;
END_RCPP
}
// inspectNodes
Rcpp::List inspectNodes(Rcpp::List trees);
RcppExport SEXP _dst_inspectNodes(SEXP treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    rcpp_result_gen = Rcpp::wrap(inspectNodes(trees));
    return rcpp_result_gen;
END_RCPP
}
// buildTreesFast
Rcpp::List buildTreesFast(const arma::sp_mat& tt, const Rcpp::NumericVector& q);
RcppExport SEXP _dst_buildTreesFast(SEXP ttSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(buildTreesFast(tt, q));
    return rcpp_result_gen;
END_RCPP
}
// unravelTreesFast
Rcpp::NumericVector unravelTreesFast(Rcpp::List trees);
RcppExport SEXP _dst_unravelTreesFast(SEXP treesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    rcpp_result_gen = Rcpp::wrap(unravelTreesFast(trees));
    return rcpp_result_gen;
END_RCPP
}
// updateTreesFast
Rcpp::List updateTreesFast(Rcpp::List trees, Rcpp::NumericVector xx_vec, Rcpp::NumericVector s_vec);
RcppExport SEXP _dst_updateTreesFast(SEXP treesSEXP, SEXP xx_vecSEXP, SEXP s_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type trees(treesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xx_vec(xx_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type s_vec(s_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreesFast(trees, xx_vec, s_vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dst_belplauHFast", (DL_FUNC) &_dst_belplauHFast, 4},
    {"_dst_closure", (DL_FUNC) &_dst_closure, 3},
    {"_dst_closureSparse", (DL_FUNC) &_dst_closureSparse, 3},
    {"_dst_commSparse", (DL_FUNC) &_dst_commSparse, 4},
    {"_dst_iotaSparse", (DL_FUNC) &_dst_iotaSparse, 2},
    {"_dst_superBcaFast", (DL_FUNC) &_dst_superBcaFast, 7},
    {"_dst_superBcaFastBelplauSingleton", (DL_FUNC) &_dst_superBcaFastBelplauSingleton, 7},
    {"_dst_buildTreeFast", (DL_FUNC) &_dst_buildTreeFast, 4},
    {"_dst_updateTreeFast", (DL_FUNC) &_dst_updateTreeFast, 3},
    {"_dst_supersetFast", (DL_FUNC) &_dst_supersetFast, 2},
    {"_dst_unravelTreeFast", (DL_FUNC) &_dst_unravelTreeFast, 1},
    {"_dst_inspectNode", (DL_FUNC) &_dst_inspectNode, 1},
    {"_dst_inspectNodes", (DL_FUNC) &_dst_inspectNodes, 1},
    {"_dst_buildTreesFast", (DL_FUNC) &_dst_buildTreesFast, 2},
    {"_dst_unravelTreesFast", (DL_FUNC) &_dst_unravelTreesFast, 1},
    {"_dst_updateTreesFast", (DL_FUNC) &_dst_updateTreesFast, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_dst(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
