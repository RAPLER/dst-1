// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// closure
LogicalMatrix closure(IntegerMatrix ttx, bool computeJoin, bool display_progress);
RcppExport SEXP _dst_closure(SEXP ttxSEXP, SEXP computeJoinSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type ttx(ttxSEXP);
    Rcpp::traits::input_parameter< bool >::type computeJoin(computeJoinSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(closure(ttx, computeJoin, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// closureSparse
arma::sp_mat closureSparse(arma::sp_mat ttx, bool computeJoin, bool display_progress);
RcppExport SEXP _dst_closureSparse(SEXP ttxSEXP, SEXP computeJoinSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type ttx(ttxSEXP);
    Rcpp::traits::input_parameter< bool >::type computeJoin(computeJoinSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(closureSparse(ttx, computeJoin, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// commSparse
NumericVector commSparse(arma::sp_mat x, arma::sp_mat x_c, double a, bool display_progress);
RcppExport SEXP _dst_commSparse(SEXP xSEXP, SEXP x_cSEXP, SEXP aSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type x_c(x_cSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(commSparse(x, x_c, a, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// iotaSparse
arma::sp_mat iotaSparse(arma::sp_mat tt, bool display_progress);
RcppExport SEXP _dst_iotaSparse(SEXP ttSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(iotaSparse(tt, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// buildTreeFast
SEXP buildTreeFast(const arma::sp_mat& tt, const NumericVector& q);
RcppExport SEXP _dst_buildTreeFast(SEXP ttSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type tt(ttSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(buildTreeFast(tt, q));
    return rcpp_result_gen;
END_RCPP
}
// updateTreeFast
SEXP updateTreeFast(SEXP tree_ptr, LogicalVector xx_vec, LogicalVector s_vec);
RcppExport SEXP _dst_updateTreeFast(SEXP tree_ptrSEXP, SEXP xx_vecSEXP, SEXP s_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type tree_ptr(tree_ptrSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type xx_vec(xx_vecSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type s_vec(s_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(updateTreeFast(tree_ptr, xx_vec, s_vec));
    return rcpp_result_gen;
END_RCPP
}
// supersetFast
SEXP supersetFast(SEXP node_ptr, LogicalVector z_vec);
RcppExport SEXP _dst_supersetFast(SEXP node_ptrSEXP, SEXP z_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type node_ptr(node_ptrSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type z_vec(z_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(supersetFast(node_ptr, z_vec));
    return rcpp_result_gen;
END_RCPP
}
// unravelTreeFast
NumericVector unravelTreeFast(SEXP tree_ptr);
RcppExport SEXP _dst_unravelTreeFast(SEXP tree_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type tree_ptr(tree_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(unravelTreeFast(tree_ptr));
    return rcpp_result_gen;
END_RCPP
}
// inspectNode
List inspectNode(SEXP tree_ptr);
RcppExport SEXP _dst_inspectNode(SEXP tree_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type tree_ptr(tree_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(inspectNode(tree_ptr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dst_closure", (DL_FUNC) &_dst_closure, 3},
    {"_dst_closureSparse", (DL_FUNC) &_dst_closureSparse, 3},
    {"_dst_commSparse", (DL_FUNC) &_dst_commSparse, 4},
    {"_dst_iotaSparse", (DL_FUNC) &_dst_iotaSparse, 2},
    {"_dst_buildTreeFast", (DL_FUNC) &_dst_buildTreeFast, 2},
    {"_dst_updateTreeFast", (DL_FUNC) &_dst_updateTreeFast, 3},
    {"_dst_supersetFast", (DL_FUNC) &_dst_supersetFast, 2},
    {"_dst_unravelTreeFast", (DL_FUNC) &_dst_unravelTreeFast, 1},
    {"_dst_inspectNode", (DL_FUNC) &_dst_inspectNode, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_dst(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
